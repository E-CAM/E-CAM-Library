.. _PaPIM-CP2K_Interface:

#########################
PaPIM's Interface to CP2K
#########################

.. sidebar:: Software Technical Information

  Language
    Fortran 90/95

  Licence
    MIT license (MIT)

  Documentation Tool
    Doxygen

.. contents:: :local:



Purpose of Module
_________________



Applications of the Module
__________________________



Compiling
_________

In order to compile this module the CP2K program package has to be properlly set-up and the CP2K has to be 
compiled as a library as well. In tha latter case, the CP2K root directory contains a sub-directory ``lib`` which 
contains the corresponding library files. In the absence of the latter, CP2K cannot be linked to PaPIM code. For 
information on installing the CP2K code and compiling it as a library the user is advise to examine the CP2K 
installation documentation at this `link <https://www.cp2k.org/howto:compile>`_. 

Fortran compiler with a MPI wrapper together with lapack libraries have to be available to successfully 
compile the code. The user is advise to examine the ``Makefile`` in the ``./source``` sub-directory prior 
to code compilation in order to select an appropriate compiler and to check or adapt the compiler's options 
to his local environment, or to generally modify the compiler options to his requirements. Special care 
should be made on the CP2K paths to the corresponding library files on certain systems. The ``Makefile`` 
contains three casses, but any other variation is possible. 

Compilation flag ``--D__USE_CP2K`` controles the inclusion of CP2K into the PaPIM code. 
If omitted the PaPIM code will be compiled without CP2K and without the split communicator parallelization 
scheme. Tha latter is not used with any current analitic potential subroutine so it is omitted (for more 
details on the potential subroutine see here). 

Upon adapting the ``Makefile``, the code compilation is executed by command ``make`` in the ``./source`` 
sub-directory. The executable ``PaPIM.exe`` is created at the same location upon successful compilation.

For module's testing purposes the user is advise to have ``numdiff`` package installesd before running the tests. 
More details on the numdiff program package and its intallation is available 
`here <http://www.nongnu.org/numdiff/>`_.

The PaPIM documentation is generated by executing the ``make`` command in the ``./doc`` sub-directory.



Testing
_______

Testing comprises of a set of tests for the analytic potentials and a set of tests for the CP2K interface 
to PaPIM code. 
Tests and all corresponding reference files are located in sub-directory ``./tests``. 
All tests have to be performed in this sub-directory. 
Details of the structure of the test files/sub-directories are explained in the :ref:`PaPIM code testing 
section <PaPIM>`. 
CP2K tests and reference files are located in the sub-directory ``cp2k``.

Tests are performed automaticaly in the ``./tests`` sub-directory by executing the command:

::

	./test.sh -c -n [number of cores]

The optional flag ``-c`` includes runing of the CP2K tests. If omitted only the tests using the analytic 
potentail will be performed. Flag ``-x`` omits the analytic potential tests and executes only the CP2K 
tests. 

Flag ``-n [number of cores]`` controles the number of processor cores used in the tests. By default 
the tests are performed on two processor cores, which can be changed by setting a different number of 
required processor cores. The number of processor cores should not exceed 20. 
In all cases the CP2K potential is calculated on one processor core for each sampling point. 
In order to change that, a different ``group_size`` variable should be specified manually in the 
corresponding ``Control.in`` files. Note that the total number of processor cores used in the tests 
should be divisable by the ``group_size`` value.

For comparison of generated output values with reference data the test script uses ``numdiff`` command 
in order to compensate for small numerical differences. By default the script looks first for the 
``numdiff`` command on the system, and in case it fails to locat it, the standard ``diff`` command 
will be used instead. However, the user is warned that due to small numerical differences between 
generated output and corresponding reference values the automated tests are most likely to fail. 
A local ``numdiff`` package copy can be included in the test by specifying its absolute path. 
For this and other options of the test script list them with the command ``./test.sh -h``.



Source Code
___________

The full PaPIM code with the interface subroutine to the CP2K is located at: 
https://gitlab.e-cam2020.eu:10443/Quantum-Dynamics/PIM/tree/master/source.

Git is recommended for downloading the full copy of the code.

The main interface subroutines for linking PaPIM to CP2K are located in the Fortran module 
file ``cp2k_module.f90``. Corresponding commands used throughout the code can be located by searching 
for the ``__USE_CP2K`` keyword. 



Parallelization and Benchmarking
________________________________

Parallelization of linked PaPIM and CP2K codes is achieved with a MPI split communicator approach. 
A separate communicator is given for the PaPIM code and for the CP2K part. The latter is split into
groups, each of a number of processor cores given by the ``group_size`` value. Therfore, the number of 
trajectories which can be sampled simultaniously is given by the quotient of the total number of used 
processor cores with the value of the ``group_size``. For the same reason the total number of cores 
must be divisable by the ``group_size`` value. The figure below explains in a simplified graphical 
maner the parallelization used in the PaPIM code linked to CP2K.







Source Code Documentation
_________________________

The source code documentation is located in the ``./doc`` sub-directory. The documentation files 
(html and latex format) are generated by executing the ``make`` command in the ``./doc`` 
sub-directory.



.. References
.. __________

.. _Linearized symmetrized quantum time correlation functions calculation via phase pre-averaging: http://dx.doi.org/10.1080/00268976.2011.619506
.. _Quantum dynamical structure factor of liquid neon via a quasiclassical symmetrized method: http://dx.doi.org/10.1063/1.4789760
.. _Gas phase infrared spectra via the phase integration quasi-classical method: http://dx.doi.org/10.1080/08927022.2013.843776
.. _An ab Initio Based Global Potential Energy Surface Describing :math:`\text{CH}_{5}^{+} \rightarrow \text{CH}_{3}^{+} + \text{H}_{2}`: pubs.acs.org/doi/abs/10.1021/jp053848o


